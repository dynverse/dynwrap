% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/container_create_method.R
\name{create_singularity_ti_method}
\alias{create_singularity_ti_method}
\alias{extract_definition_from_singularity_image}
\alias{pull_singularity_ti_method}
\title{Create a TI method from a singularity image}
\usage{
create_singularity_ti_method(image,
  definition = extract_definition_from_singularity_image(image), ...)

extract_definition_from_singularity_image(image,
  definition_location = "/code/definition.yml")

pull_singularity_ti_method(image,
  singularity_image_file = paste0(gsub("[^\\\\/]*/([^\\\\:]*).*", "\\\\1",
  image), ".simg"),
  singularity_images_folder = options("dynwrap_singularity_images_folder"))
}
\arguments{
\item{image}{The location of the singularity image file, eg. \code{comp1.simg}.}

\item{definition}{The method definition, a list containing the name, input, output and parameters of a method.
Optional, as the definition file will be automatically loaded from the images \code{/code/definition.yml} using \link{extract_definition_from_singularity_image}.}

\item{...}{Other information about the method}

\item{definition_location}{The location of the definition file within the image}

\item{singularity_image_file}{The name of the image file}

\item{singularity_images_folder}{The location of the folder containing the singularity images}
}
\description{
This function creates a TI method from a singularity image. This image can be build using \code{singularity build} from a docker image (eg. \code{singularity build comp1.simg docker://dynverse/comp1})
}
