% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/method_create_ti_method_definition.R
\name{create_ti_method_definition}
\alias{create_ti_method_definition}
\title{Create a TI method from a local method definition file}
\usage{
create_ti_method_definition(definition, script, return_function = TRUE)
}
\arguments{
\item{definition}{A definition, see \code{\link[=definition]{definition()}}}

\item{script}{Location of the script that will be executed. Has to contain a #!}

\item{return_function}{Whether to return a function that allows you to override the default parameters, or just return the method meta data as is.}
}
\value{
A function that can be used to adapt the parameters of the method. This functions returns a list containing all metadata of the method, and can be used to \link[=infer_trajectory]{infer a trajectory}
}
\description{
The local method definition file describes a method that is runnable on the local system.
See \href{../doc/create_ti_method_definition.html}{\code{vignette("create_ti_method_definition", "dynwrap")}} for a tutorial on how to create a containerized TI method.
}
\examples{
\donttest{
# make two temporary files
definition.yml <- tempfile()
run.R <- tempfile()

# determine content
definition_txt <- "method:
  id: comp_1

parameters:
  - id: component
    default: 1
    type: integer
    distribution:
      type: uniform
      lower: 1
      upper: 10
    description: The nth component to use

wrapper:
  input_required: expression
  input_optional: start_id"

# Normally, use #'/usr/bin/env Rscript as shebang
# but $R_HOME/bin/Rscript when running R CMD check
shebang <-
  if (Sys.getenv("_R_CHECK_PACKAGE_NAME_") == "") {
    "#!/usr/bin/env Rscript"
  } else {
    paste0("#!", Sys.getenv("R_HOME"), "/bin/Rscript")
  }
run_txt <- paste0(shebang, "

dataset <- dyncli::main()

library(dynwrap)
library(dplyr)
library(stats)
library(dyncli)

# infer trajectory
pca <- prcomp(dataset$expression)

pseudotime <- pca$x[, dataset$parameters$component]

# flip pseudotimes using start_id
if (!is.null(dataset$priors$start_id)) {
  if (mean(pseudotime[start_id]) > 0.5) {
    pseudotime <- 1 - pseudotime
  }
}

# build trajectory
trajectory <- wrap_data(cell_ids = rownames(dataset$expression)) \%>\%
  add_linear_trajectory(pseudotime = pseudotime)

# save output
write_output(trajectory, dataset$output)")

# write content to files
writeLines(definition_txt, definition.yml)
writeLines(run_txt, run.R)

requireNamespace("fs")
fs::file_chmod(run.R, "+x")

# run tmethod
method <- create_ti_method_definition(
  definition.yml,
  run.R
)
trajectory <- infer_trajectory(example_dataset, method(), verbose = TRUE)
}

}
\keyword{create_ti_method}
